///STEP ONE///
Requirement: Detect all valid IPs in a range

Make a file that ingests a file then starts scanning a list of subnets

Subnet_sweeperi.py:
	Load a file (csv) of IPs and prefix lengths
	Get a value like 192.168.1.1, 24 which means we need to scan .1->.255
	So CIDR pow(2, 32) 2**(32-32) == 2**0 == 1 
			   2**(32-24) == 2**8 == 256
	Breakup CIDR based on subnet mask [32-24] (.X) | [23-16] (.X.X) | [15-8] (.X.X.X) | [7-0] (X.X.X.X)
	Will initially focus on the >=24 PL case.
	So we get 192.168.1.0/24 which means we do 192.168.1.0 + [i] where i iterates to 255
	
	Subnet sweep should/does return a list of endpoints in a list:
		How should we format this output? This return would be a list where I have the first subnet detected endpoints
		That'd be the first index, the next index would be the next list and so forth. but why
		Why would you return a list of list becuase the endproduct of your endpoints is that you
			take the endpoints that you've discovered in the network then populate the graph
			and chart relations between endpoints so really we just need *initially* a list of 
			all endpoints then need.
		
		SO subnet sweeper outputs a list of discovered endpoints, now we need to intercept that traffic and create relations	

Network_graph.py
	Using NetworkX we can create a graph similar to this article: https://plotly.com/python/network-graphs/
	Where decide nodes as endpoints with an origin node being the gateway.
	Initial testing we designate the local router: 192.168.1.1 as the origin node
	That means all endpoints in this initial instance must relate to the origin.
	So network_graph calls subnet_sweeper which returns a list of IPs
	Each IP == Endpoint == Node in the graph much then have an 'edge' to the gateway .1

Now that the network graph functions with a single IP need to expand to support multiple ranges and gateways
	Edit to support ingesting csv with gateways and detected IPs and plot them as well
	Most subnets we're scanning are going to have a gateway and that gateway is going to be at the beginning of the range

How can we get a list of all possible networks that are actively in use?	
	1. Rely on the users to provide a nice (easy) list of subnets and prefix
	2. Somehow query /something/ to determine additional network ranges that might exist.

